apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

apply plugin: 'com.github.johnrengelman.shadow'

String mavenGroupId = 'org.uh.hulib.attx.wc.uv'
String mavenVersion = '1.0-SNAPSHOT'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    // mavenCentral()
    maven { url "https://plugins.gradle.org/m2/"}
    maven { url "$artifactRepoURL"}
}

dependencies {
    // Adding dependencies here will add the dependencies to each subproject.
    testCompile 'junit:junit:4.12'
}

String mavenArtifactId = name

group = mavenGroupId
version = mavenVersion

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives jar
    archives sourcesJar
}

configure(install.repositories.mavenInstaller) {
    pom.project {
        groupId = mavenGroupId
        artifactId = mavenArtifactId
        version = mavenVersion
    }
}

task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
    sourceSets*.allSource*.srcDirs*.each { File srcDir ->
        if (!srcDir.isDirectory()) {
            println "Creating source folder: ${srcDir}"
            srcDir.mkdirs()
        }
    }
}

task changePermission(type:Exec) {
    workingDir '.'
    commandLine 'chmod', '700', '../mvn.sh'
}

task repackage(type: Exec) {
    workingDir '.'
    commandLine '../mvn.sh'
}

repackage.dependsOn changePermission

task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
    title = 'All modules'
    destinationDir = new File(project.buildDir, 'merged-javadoc')

    // Note: The closures below are executed lazily.
    source {
        subprojects*.sourceSets*.main*.allSource
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}

publishing {
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url "${artifactRepoURL}"
            credentials {
                username "${artifactRepoUser}"
                password "${artifactRepoPassword}"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

}


